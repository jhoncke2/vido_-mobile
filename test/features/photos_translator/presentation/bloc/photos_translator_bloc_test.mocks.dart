// Mocks generated by Mockito 5.2.0 from annotations
// in vido/test/features/photos_translator/presentation/bloc/photos_translator_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert' as _i18;
import 'dart:io' as _i5;
import 'dart:typed_data' as _i19;
import 'dart:ui' as _i13;

import 'package:camera/camera.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/services.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vido/features/photos_translator/domain/entities/pdf_file.dart'
    as _i16;
import 'package:vido/features/photos_translator/domain/entities/translations_file.dart'
    as _i12;
import 'package:vido/features/photos_translator/domain/failures/photos_translator_failure.dart'
    as _i8;
import 'package:vido/features/photos_translator/presentation/use_cases/create_translations_file.dart'
    as _i6;
import 'package:vido/features/photos_translator/presentation/use_cases/end_photos_translations_file.dart'
    as _i10;
import 'package:vido/features/photos_translator/presentation/use_cases/generate_pdf.dart'
    as _i17;
import 'package:vido/features/photos_translator/presentation/use_cases/get_completed_files.dart'
    as _i15;
import 'package:vido/features/photos_translator/presentation/use_cases/get_uncompleted_translations_files.dart'
    as _i11;
import 'package:vido/features/photos_translator/presentation/use_cases/translate_photo.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeCameraDescription_1 extends _i1.Fake
    implements _i3.CameraDescription {}

class _FakeCameraValue_2 extends _i1.Fake implements _i3.CameraValue {}

class _FakeXFile_3 extends _i1.Fake implements _i3.XFile {}

class _FakeWidget_4 extends _i1.Fake implements _i4.Widget {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeFile_5 extends _i1.Fake implements _i5.File {}

class _FakeUri_6 extends _i1.Fake implements Uri {}

class _FakeDirectory_7 extends _i1.Fake implements _i5.Directory {}

class _FakeDateTime_8 extends _i1.Fake implements DateTime {}

class _FakeRandomAccessFile_9 extends _i1.Fake implements _i5.RandomAccessFile {
}

class _FakeIOSink_10 extends _i1.Fake implements _i5.IOSink {}

class _FakeFileStat_11 extends _i1.Fake implements _i5.FileStat {}

class _FakeFileSystemEntity_12 extends _i1.Fake
    implements _i5.FileSystemEntity {}

/// A class which mocks [CreateTranslationsFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTranslationsFile extends _i1.Mock
    implements _i6.CreateTranslationsFile {
  MockCreateTranslationsFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, int>> call(String? name) =>
      (super.noSuchMethod(Invocation.method(#call, [name]),
              returnValue:
                  Future<_i2.Either<_i8.PhotosTranslatorFailure, int>>.value(
                      _FakeEither_0<_i8.PhotosTranslatorFailure, int>()))
          as _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, int>>);
}

/// A class which mocks [TranslatePhoto].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslatePhoto extends _i1.Mock implements _i9.TranslatePhoto {
  MockTranslatePhoto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, void>> call(
          String? photoUrl) =>
      (super.noSuchMethod(Invocation.method(#call, [photoUrl]),
              returnValue:
                  Future<_i2.Either<_i8.PhotosTranslatorFailure, void>>.value(
                      _FakeEither_0<_i8.PhotosTranslatorFailure, void>()))
          as _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, void>>);
}

/// A class which mocks [EndPhotosTranslationsFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockEndPhotosTranslationsFile extends _i1.Mock
    implements _i10.EndPhotosTranslationsFile {
  MockEndPhotosTranslationsFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, void>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i2.Either<_i8.PhotosTranslatorFailure, void>>.value(
                      _FakeEither_0<_i8.PhotosTranslatorFailure, void>()))
          as _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, void>>);
}

/// A class which mocks [GetUncompletedTranslationsFiles].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUncompletedTranslationsFiles extends _i1.Mock
    implements _i11.GetUncompletedTranslationsFiles {
  MockGetUncompletedTranslationsFiles() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, List<_i12.TranslationsFile>>>
      call() => (super.noSuchMethod(Invocation.method(#call, []),
          returnValue:
              Future<_i2.Either<_i8.PhotosTranslatorFailure, List<_i12.TranslationsFile>>>.value(
                  _FakeEither_0<_i8.PhotosTranslatorFailure,
                      List<_i12.TranslationsFile>>())) as _i7
          .Future<_i2.Either<_i8.PhotosTranslatorFailure, List<_i12.TranslationsFile>>>);
}

/// A class which mocks [CameraController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraController extends _i1.Mock implements _i3.CameraController {
  MockCameraController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CameraDescription get description =>
      (super.noSuchMethod(Invocation.getter(#description),
          returnValue: _FakeCameraDescription_1()) as _i3.CameraDescription);
  @override
  _i3.ResolutionPreset get resolutionPreset =>
      (super.noSuchMethod(Invocation.getter(#resolutionPreset),
          returnValue: _i3.ResolutionPreset.low) as _i3.ResolutionPreset);
  @override
  bool get enableAudio =>
      (super.noSuchMethod(Invocation.getter(#enableAudio), returnValue: false)
          as bool);
  @override
  int get cameraId =>
      (super.noSuchMethod(Invocation.getter(#cameraId), returnValue: 0) as int);
  @override
  _i3.CameraValue get value => (super.noSuchMethod(Invocation.getter(#value),
      returnValue: _FakeCameraValue_2()) as _i3.CameraValue);
  @override
  set value(_i3.CameraValue? newValue) =>
      super.noSuchMethod(Invocation.setter(#value, newValue),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void debugCheckIsDisposed() =>
      super.noSuchMethod(Invocation.method(#debugCheckIsDisposed, []),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> prepareForVideoRecording() =>
      (super.noSuchMethod(Invocation.method(#prepareForVideoRecording, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> pausePreview() =>
      (super.noSuchMethod(Invocation.method(#pausePreview, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> resumePreview() =>
      (super.noSuchMethod(Invocation.method(#resumePreview, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i3.XFile> takePicture() =>
      (super.noSuchMethod(Invocation.method(#takePicture, []),
              returnValue: Future<_i3.XFile>.value(_FakeXFile_3()))
          as _i7.Future<_i3.XFile>);
  @override
  _i7.Future<void> startImageStream(_i3.onLatestImageAvailable? onAvailable) =>
      (super.noSuchMethod(Invocation.method(#startImageStream, [onAvailable]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> stopImageStream() =>
      (super.noSuchMethod(Invocation.method(#stopImageStream, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> startVideoRecording() =>
      (super.noSuchMethod(Invocation.method(#startVideoRecording, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i3.XFile> stopVideoRecording() =>
      (super.noSuchMethod(Invocation.method(#stopVideoRecording, []),
              returnValue: Future<_i3.XFile>.value(_FakeXFile_3()))
          as _i7.Future<_i3.XFile>);
  @override
  _i7.Future<void> pauseVideoRecording() =>
      (super.noSuchMethod(Invocation.method(#pauseVideoRecording, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> resumeVideoRecording() =>
      (super.noSuchMethod(Invocation.method(#resumeVideoRecording, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i4.Widget buildPreview() =>
      (super.noSuchMethod(Invocation.method(#buildPreview, []),
          returnValue: _FakeWidget_4()) as _i4.Widget);
  @override
  _i7.Future<double> getMaxZoomLevel() =>
      (super.noSuchMethod(Invocation.method(#getMaxZoomLevel, []),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  _i7.Future<double> getMinZoomLevel() =>
      (super.noSuchMethod(Invocation.method(#getMinZoomLevel, []),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  _i7.Future<void> setZoomLevel(double? zoom) =>
      (super.noSuchMethod(Invocation.method(#setZoomLevel, [zoom]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setFlashMode(_i3.FlashMode? mode) =>
      (super.noSuchMethod(Invocation.method(#setFlashMode, [mode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setExposureMode(_i3.ExposureMode? mode) =>
      (super.noSuchMethod(Invocation.method(#setExposureMode, [mode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setExposurePoint(_i13.Offset? point) =>
      (super.noSuchMethod(Invocation.method(#setExposurePoint, [point]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<double> getMinExposureOffset() =>
      (super.noSuchMethod(Invocation.method(#getMinExposureOffset, []),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  _i7.Future<double> getMaxExposureOffset() =>
      (super.noSuchMethod(Invocation.method(#getMaxExposureOffset, []),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  _i7.Future<double> getExposureOffsetStepSize() =>
      (super.noSuchMethod(Invocation.method(#getExposureOffsetStepSize, []),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  _i7.Future<double> setExposureOffset(double? offset) =>
      (super.noSuchMethod(Invocation.method(#setExposureOffset, [offset]),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  _i7.Future<void> lockCaptureOrientation(
          [_i14.DeviceOrientation? orientation]) =>
      (super.noSuchMethod(
          Invocation.method(#lockCaptureOrientation, [orientation]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setFocusMode(_i3.FocusMode? mode) =>
      (super.noSuchMethod(Invocation.method(#setFocusMode, [mode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> unlockCaptureOrientation() =>
      (super.noSuchMethod(Invocation.method(#unlockCaptureOrientation, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setFocusPoint(_i13.Offset? point) =>
      (super.noSuchMethod(Invocation.method(#setFocusPoint, [point]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetCompletedTranslationsFiles].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCompletedTranslationsFiles extends _i1.Mock
    implements _i15.GetCompletedFiles {
  MockGetCompletedTranslationsFiles() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, List<_i16.PdfFile>>>
      call() => (super.noSuchMethod(Invocation.method(#call, []),
          returnValue:
              Future<_i2.Either<_i8.PhotosTranslatorFailure, List<_i16.PdfFile>>>.value(
                  _FakeEither_0<_i8.PhotosTranslatorFailure,
                      List<_i16.PdfFile>>())) as _i7
          .Future<_i2.Either<_i8.PhotosTranslatorFailure, List<_i16.PdfFile>>>);
}

/// A class which mocks [GeneratePdf].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeneratePdf extends _i1.Mock implements _i17.GeneratePdf {
  MockGeneratePdf() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, _i5.File>> call(
          _i16.PdfFile? file) =>
      (super.noSuchMethod(Invocation.method(#call, [file]),
              returnValue: Future<
                      _i2.Either<_i8.PhotosTranslatorFailure, _i5.File>>.value(
                  _FakeEither_0<_i8.PhotosTranslatorFailure, _i5.File>()))
          as _i7.Future<_i2.Either<_i8.PhotosTranslatorFailure, _i5.File>>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i5.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.File get absolute => (super.noSuchMethod(Invocation.getter(#absolute),
      returnValue: _FakeFile_5()) as _i5.File);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_6())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i5.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_7()) as _i5.Directory);
  @override
  _i7.Future<_i5.File> create({bool? recursive = false}) => (super.noSuchMethod(
          Invocation.method(#create, [], {#recursive: recursive}),
          returnValue: Future<_i5.File>.value(_FakeFile_5()))
      as _i7.Future<_i5.File>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i7.Future<_i5.File> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i5.File>.value(_FakeFile_5()))
          as _i7.Future<_i5.File>);
  @override
  _i5.File renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFile_5()) as _i5.File);
  @override
  _i7.Future<_i5.File> copy(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copy, [newPath]),
              returnValue: Future<_i5.File>.value(_FakeFile_5()))
          as _i7.Future<_i5.File>);
  @override
  _i5.File copySync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copySync, [newPath]),
          returnValue: _FakeFile_5()) as _i5.File);
  @override
  _i7.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);
  @override
  _i7.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(Invocation.method(#lastAccessed, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_8()))
          as _i7.Future<DateTime>);
  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(Invocation.method(#lastAccessedSync, []),
          returnValue: _FakeDateTime_8()) as DateTime);
  @override
  _i7.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastAccessed, [time]),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastAccessedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_8()))
          as _i7.Future<DateTime>);
  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(Invocation.method(#lastModifiedSync, []),
          returnValue: _FakeDateTime_8()) as DateTime);
  @override
  _i7.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastModified, [time]),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastModifiedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i5.RandomAccessFile> open(
          {_i5.FileMode? mode = _i5.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#open, [], {#mode: mode}),
              returnValue:
                  Future<_i5.RandomAccessFile>.value(_FakeRandomAccessFile_9()))
          as _i7.Future<_i5.RandomAccessFile>);
  @override
  _i5.RandomAccessFile openSync({_i5.FileMode? mode = _i5.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#openSync, [], {#mode: mode}),
          returnValue: _FakeRandomAccessFile_9()) as _i5.RandomAccessFile);
  @override
  _i7.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
          returnValue: Stream<List<int>>.empty()) as _i7.Stream<List<int>>);
  @override
  _i5.IOSink openWrite(
          {_i5.FileMode? mode = _i5.FileMode.write,
          _i18.Encoding? encoding = const _i18.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#openWrite, [], {#mode: mode, #encoding: encoding}),
          returnValue: _FakeIOSink_10()) as _i5.IOSink);
  @override
  _i7.Future<_i19.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future<_i19.Uint8List>.value(_i19.Uint8List(0)))
          as _i7.Future<_i19.Uint8List>);
  @override
  _i19.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(Invocation.method(#readAsBytesSync, []),
          returnValue: _i19.Uint8List(0)) as _i19.Uint8List);
  @override
  _i7.Future<String> readAsString(
          {_i18.Encoding? encoding = const _i18.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  String readAsStringSync({_i18.Encoding? encoding = const _i18.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
          returnValue: '') as String);
  @override
  _i7.Future<List<String>> readAsLines(
          {_i18.Encoding? encoding = const _i18.Utf8Codec()}) =>
      (super.noSuchMethod(
              Invocation.method(#readAsLines, [], {#encoding: encoding}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i7.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i18.Encoding? encoding = const _i18.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
          returnValue: <String>[]) as List<String>);
  @override
  _i7.Future<_i5.File> writeAsBytes(List<int>? bytes,
          {_i5.FileMode? mode = _i5.FileMode.write, bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeAsBytes, [bytes], {#mode: mode, #flush: flush}),
              returnValue: Future<_i5.File>.value(_FakeFile_5()))
          as _i7.Future<_i5.File>);
  @override
  void writeAsBytesSync(List<int>? bytes,
          {_i5.FileMode? mode = _i5.FileMode.write, bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i5.File> writeAsString(String? contents,
          {_i5.FileMode? mode = _i5.FileMode.write,
          _i18.Encoding? encoding = const _i18.Utf8Codec(),
          bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(#writeAsString, [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush}),
              returnValue: Future<_i5.File>.value(_FakeFile_5()))
          as _i7.Future<_i5.File>);
  @override
  void writeAsStringSync(String? contents,
          {_i5.FileMode? mode = _i5.FileMode.write,
          _i18.Encoding? encoding = const _i18.Utf8Codec(),
          bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(#writeAsStringSync, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i7.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i7.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i7.Future<_i5.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i5.FileStat>.value(_FakeFileStat_11()))
          as _i7.Future<_i5.FileStat>);
  @override
  _i5.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_11()) as _i5.FileStat);
  @override
  _i7.Future<_i5.FileSystemEntity> delete({bool? recursive = false}) => (super
      .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
          returnValue: Future<_i5.FileSystemEntity>.value(
              _FakeFileSystemEntity_12())) as _i7.Future<_i5.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i7.Stream<_i5.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i5.FileSystemEvent>.empty())
          as _i7.Stream<_i5.FileSystemEvent>);
}
