// Mocks generated by Mockito 5.3.0 from annotations
// in vido/test/features/files_navigator/presentation/bloc/files_navigator_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i16;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i17;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vido/core/domain/translations_transmitter.dart' as _i14;
import 'package:vido/features/files_navigator/domain/entities/search_appearance.dart'
    as _i11;
import 'package:vido/features/files_navigator/domain/failures/files_navigation_failure.dart'
    as _i6;
import 'package:vido/features/files_navigator/presentation/files_transmitter/files_transmitter.dart'
    as _i12;
import 'package:vido/features/files_navigator/presentation/use_cases/load_folder_brothers.dart'
    as _i7;
import 'package:vido/features/files_navigator/presentation/use_cases/load_folder_children.dart'
    as _i4;
import 'package:vido/features/files_navigator/presentation/use_cases/load_pdf.dart'
    as _i8;
import 'package:vido/features/files_navigator/presentation/use_cases/search.dart'
    as _i10;
import 'package:vido/features/photos_translator/domain/entities/app_file.dart'
    as _i13;
import 'package:vido/features/photos_translator/domain/entities/pdf_file.dart'
    as _i9;
import 'package:vido/features/photos_translator/domain/entities/translations_file.dart'
    as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFile_1 extends _i1.SmartFake implements _i3.File {
  _FakeFile_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDirectory_3 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_5 extends _i1.SmartFake
    implements _i3.RandomAccessFile {
  _FakeRandomAccessFile_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIOSink_6 extends _i1.SmartFake implements _i3.IOSink {
  _FakeIOSink_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFileStat_7 extends _i1.SmartFake implements _i3.FileStat {
  _FakeFileStat_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_8 extends _i1.SmartFake
    implements _i3.FileSystemEntity {
  _FakeFileSystemEntity_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [LoadFolderChildren].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadFolderChildren extends _i1.Mock
    implements _i4.LoadFolderChildren {
  MockLoadFolderChildren() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.FilesNavigationFailure, void>> call(int? id) =>
      (super.noSuchMethod(Invocation.method(#call, [id]),
          returnValue:
              _i5.Future<_i2.Either<_i6.FilesNavigationFailure, void>>.value(
                  _FakeEither_0<_i6.FilesNavigationFailure, void>(
                      this, Invocation.method(#call, [id])))) as _i5
          .Future<_i2.Either<_i6.FilesNavigationFailure, void>>);
}

/// A class which mocks [LoadFolderBrothers].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadFolderBrothers extends _i1.Mock
    implements _i7.LoadFolderBrothers {
  MockLoadFolderBrothers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.FilesNavigationFailure, void>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue:
              _i5.Future<_i2.Either<_i6.FilesNavigationFailure, void>>.value(
                  _FakeEither_0<_i6.FilesNavigationFailure, void>(
                      this, Invocation.method(#call, [])))) as _i5
          .Future<_i2.Either<_i6.FilesNavigationFailure, void>>);
}

/// A class which mocks [LoadPdf].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadPdf extends _i1.Mock implements _i8.LoadPdf {
  MockLoadPdf() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.FilesNavigationFailure, _i3.File>> call(
          _i9.PdfFile? file) =>
      (super.noSuchMethod(Invocation.method(#call, [file]),
          returnValue:
              _i5.Future<_i2.Either<_i6.FilesNavigationFailure, _i3.File>>.value(
                  _FakeEither_0<_i6.FilesNavigationFailure, _i3.File>(
                      this, Invocation.method(#call, [file])))) as _i5
          .Future<_i2.Either<_i6.FilesNavigationFailure, _i3.File>>);
}

/// A class which mocks [Search].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearch extends _i1.Mock implements _i10.Search {
  MockSearch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.FilesNavigationFailure, List<_i11.SearchAppearance>>>
      call(String? text) => (super.noSuchMethod(
          Invocation.method(#call, [text]),
          returnValue:
              _i5.Future<_i2.Either<_i6.FilesNavigationFailure, List<_i11.SearchAppearance>>>.value(
                  _FakeEither_0<_i6.FilesNavigationFailure, List<_i11.SearchAppearance>>(
                      this, Invocation.method(#call, [text])))) as _i5
          .Future<_i2.Either<_i6.FilesNavigationFailure, List<_i11.SearchAppearance>>>);
}

/// A class which mocks [AppFilesTransmitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppFilesTransmitter extends _i1.Mock
    implements _i12.AppFilesTransmitter {
  MockAppFilesTransmitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i13.AppFile>> get appFiles =>
      (super.noSuchMethod(Invocation.getter(#appFiles),
              returnValue: _i5.Stream<List<_i13.AppFile>>.empty())
          as _i5.Stream<List<_i13.AppFile>>);
  @override
  _i5.Future<void> setAppFiles(List<_i13.AppFile>? files) =>
      (super.noSuchMethod(Invocation.method(#setAppFiles, [files]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
}

/// A class which mocks [TranslationsFilesTransmitter].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslationsFilesTransmitter extends _i1.Mock
    implements _i14.TranslationsFilesTransmitter {
  MockTranslationsFilesTransmitter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i15.TranslationsFile>> get translationsFiles =>
      (super.noSuchMethod(Invocation.getter(#translationsFiles),
              returnValue: _i5.Stream<List<_i15.TranslationsFile>>.empty())
          as _i5.Stream<List<_i15.TranslationsFile>>);
  @override
  _i5.Future<void> setTranslationsFiles(List<_i15.TranslationsFile>? files) =>
      (super.noSuchMethod(Invocation.method(#setTranslationsFiles, [files]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i3.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.File get absolute => (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeFile_1(this, Invocation.getter(#absolute)))
      as _i3.File);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri => (super.noSuchMethod(Invocation.getter(#uri),
      returnValue: _FakeUri_2(this, Invocation.getter(#uri))) as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i3.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
          returnValue: _FakeDirectory_3(this, Invocation.getter(#parent)))
      as _i3.Directory);
  @override
  _i5.Future<_i3.File> create({bool? recursive = false}) => (super.noSuchMethod(
          Invocation.method(#create, [], {#recursive: recursive}),
          returnValue: _i5.Future<_i3.File>.value(_FakeFile_1(
              this, Invocation.method(#create, [], {#recursive: recursive}))))
      as _i5.Future<_i3.File>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.File> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: _i5.Future<_i3.File>.value(
                  _FakeFile_1(this, Invocation.method(#rename, [newPath]))))
          as _i5.Future<_i3.File>);
  @override
  _i3.File renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
              returnValue:
                  _FakeFile_1(this, Invocation.method(#renameSync, [newPath])))
          as _i3.File);
  @override
  _i5.Future<_i3.File> copy(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copy, [newPath]),
              returnValue: _i5.Future<_i3.File>.value(
                  _FakeFile_1(this, Invocation.method(#copy, [newPath]))))
          as _i5.Future<_i3.File>);
  @override
  _i3.File copySync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copySync, [newPath]),
              returnValue:
                  _FakeFile_1(this, Invocation.method(#copySync, [newPath])))
          as _i3.File);
  @override
  _i5.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: _i5.Future<int>.value(0)) as _i5.Future<int>);
  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);
  @override
  _i5.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(Invocation.method(#lastAccessed, []),
              returnValue: _i5.Future<DateTime>.value(
                  _FakeDateTime_4(this, Invocation.method(#lastAccessed, []))))
          as _i5.Future<DateTime>);
  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
          Invocation.method(#lastAccessedSync, []),
          returnValue:
              _FakeDateTime_4(this, Invocation.method(#lastAccessedSync, [])))
      as DateTime);
  @override
  _i5.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastAccessed, [time]),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastAccessedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: _i5.Future<DateTime>.value(
                  _FakeDateTime_4(this, Invocation.method(#lastModified, []))))
          as _i5.Future<DateTime>);
  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
          Invocation.method(#lastModifiedSync, []),
          returnValue:
              _FakeDateTime_4(this, Invocation.method(#lastModifiedSync, [])))
      as DateTime);
  @override
  _i5.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastModified, [time]),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastModifiedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.RandomAccessFile> open(
          {_i3.FileMode? mode = _i3.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#open, [], {#mode: mode}),
              returnValue: _i5.Future<_i3.RandomAccessFile>.value(
                  _FakeRandomAccessFile_5(
                      this, Invocation.method(#open, [], {#mode: mode}))))
          as _i5.Future<_i3.RandomAccessFile>);
  @override
  _i3.RandomAccessFile openSync({_i3.FileMode? mode = _i3.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#openSync, [], {#mode: mode}),
              returnValue: _FakeRandomAccessFile_5(
                  this, Invocation.method(#openSync, [], {#mode: mode})))
          as _i3.RandomAccessFile);
  @override
  _i5.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
          returnValue: _i5.Stream<List<int>>.empty()) as _i5.Stream<List<int>>);
  @override
  _i3.IOSink openWrite(
          {_i3.FileMode? mode = _i3.FileMode.write,
          _i16.Encoding? encoding = const _i16.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#openWrite, [], {#mode: mode, #encoding: encoding}),
          returnValue: _FakeIOSink_6(
              this,
              Invocation.method(
                  #openWrite, [], {#mode: mode, #encoding: encoding}))) as _i3
          .IOSink);
  @override
  _i5.Future<_i17.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: _i5.Future<_i17.Uint8List>.value(_i17.Uint8List(0)))
          as _i5.Future<_i17.Uint8List>);
  @override
  _i17.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(Invocation.method(#readAsBytesSync, []),
          returnValue: _i17.Uint8List(0)) as _i17.Uint8List);
  @override
  _i5.Future<String> readAsString(
          {_i16.Encoding? encoding = const _i16.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: _i5.Future<String>.value('')) as _i5.Future<String>);
  @override
  String readAsStringSync({_i16.Encoding? encoding = const _i16.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
          returnValue: '') as String);
  @override
  _i5.Future<List<String>> readAsLines(
          {_i16.Encoding? encoding = const _i16.Utf8Codec()}) =>
      (super.noSuchMethod(
              Invocation.method(#readAsLines, [], {#encoding: encoding}),
              returnValue: _i5.Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i16.Encoding? encoding = const _i16.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
          returnValue: <String>[]) as List<String>);
  @override
  _i5.Future<_i3.File> writeAsBytes(List<int>? bytes,
          {_i3.FileMode? mode = _i3.FileMode.write, bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeAsBytes, [bytes], {#mode: mode, #flush: flush}),
              returnValue: _i5.Future<_i3.File>.value(_FakeFile_1(this,
                  Invocation.method(#writeAsBytes, [bytes], {#mode: mode, #flush: flush}))))
          as _i5.Future<_i3.File>);
  @override
  void writeAsBytesSync(List<int>? bytes,
          {_i3.FileMode? mode = _i3.FileMode.write, bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.File> writeAsString(String? contents,
          {_i3.FileMode? mode = _i3.FileMode.write,
          _i16.Encoding? encoding = const _i16.Utf8Codec(),
          bool? flush = false}) =>
      (super
          .noSuchMethod(Invocation.method(#writeAsString, [contents], {#mode: mode, #encoding: encoding, #flush: flush}),
              returnValue: _i5.Future<_i3.File>.value(_FakeFile_1(
                  this,
                  Invocation.method(#writeAsString, [
                    contents
                  ], {
                    #mode: mode,
                    #encoding: encoding,
                    #flush: flush
                  })))) as _i5.Future<_i3.File>);
  @override
  void writeAsStringSync(String? contents,
          {_i3.FileMode? mode = _i3.FileMode.write,
          _i16.Encoding? encoding = const _i16.Utf8Codec(),
          bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(#writeAsStringSync, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i5.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: _i5.Future<String>.value('')) as _i5.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i5.Future<_i3.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: _i5.Future<_i3.FileStat>.value(
                  _FakeFileStat_7(this, Invocation.method(#stat, []))))
          as _i5.Future<_i3.FileStat>);
  @override
  _i3.FileStat statSync() => (super.noSuchMethod(
          Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_7(this, Invocation.method(#statSync, [])))
      as _i3.FileStat);
  @override
  _i5.Future<_i3.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: _i5.Future<_i3.FileSystemEntity>.value(
                  _FakeFileSystemEntity_8(this,
                      Invocation.method(#delete, [], {#recursive: recursive}))))
      as _i5.Future<_i3.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i5.Stream<_i3.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: _i5.Stream<_i3.FileSystemEvent>.empty())
          as _i5.Stream<_i3.FileSystemEvent>);
}
